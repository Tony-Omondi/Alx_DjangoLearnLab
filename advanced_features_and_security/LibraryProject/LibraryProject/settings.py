"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-i=fpm&fii=g#v@qb4zkz^90uq6w#$5b-9+(^^pkyquz&)bqvze')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # Disabled in production to prevent information leaks

# Allowed hosts for production
ALLOWED_HOSTS = ['yourdomain.com', 'localhost', '127.0.0.1']  # Replace with your production domain

# Custom user model
AUTH_USER_MODEL = 'bookshelf.CustomUser'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
    'relationship_app',
    'csp',  # For Content Security Policy
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',  # For CSP
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# HTTPS and Security Settings
SECURE_SSL_REDIRECT = True  # Redirect all HTTP requests to HTTPS
SECURE_HSTS_SECONDS = 31536000  # Enforce HTTPS for 1 year via HSTS
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply HSTS to all subdomains
SECURE_HSTS_PRELOAD = True  # Allow HSTS preload listing
SESSION_COOKIE_SECURE = True  # Session cookies only over HTTPS
CSRF_COOKIE_SECURE = True  # CSRF cookies only over HTTPS
SECURE_BROWSER_XSS_FILTER = True  # Enable browser XSS filtering
SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevent MIME type sniffing
X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking by disallowing framing

# Content Security Policy (CSP)
CSP_DEFAULT_SRC = ("'self'",)  # Restrict content to same origin
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'")  # Adjust for external scripts if needed
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")  # Adjust for external styles if needed
CSP_IMG_SRC = ("'self'", "data:")  # Allow images from same origin and data URIs

"""
Security Notes:
- SECURE_SSL_REDIRECT: Ensures all traffic is redirected to HTTPS.
- SECURE_HSTS_SECONDS: Enforces HTTPS for 1 year via HSTS.
- SECURE_HSTS_INCLUDE_SUBDOMAINS: Applies HSTS to subdomains.
- SECURE_HSTS_PRELOAD: Allows HSTS preload for browser inclusion.
- SESSION_COOKIE_SECURE and CSRF_COOKIE_SECURE: Restrict cookies to HTTPS.
- SECURE_BROWSER_XSS_FILTER: Enables browser XSS protection.
- SECURE_CONTENT_TYPE_NOSNIFF: Prevents MIME type sniffing.
- X_FRAME_OPTIONS='DENY': Blocks clickjacking.
- CSP: Restricts content sources to mitigate XSS risks.
- SECRET_KEY: Use environment variable in production for security.
- Install 'django-csp' with 'pip install django-csp'.
- Run 'python manage.py check --deploy' to verify settings.
"""
# Implementing HTTPS and Secure Redirects in Django

This document outlines the configuration of HTTPS support, secure cookies, and security headers in the `LibraryProject` Django application, along with deployment instructions and a security review. It enhances the security of the application by enforcing HTTPS connections, protecting cookies, and mitigating common web vulnerabilities.

## Step 1: Configure Django for HTTPS Support
The `settings.py` file is updated to enforce HTTPS redirects and implement HTTP Strict Transport Security (HSTS) to ensure browsers use secure connections.

### LibraryProject/settings.py
```python
"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-i=fpm&fii=g#v@qb4zkz^90uq6w#$5b-9+(^^pkyquz&)bqvze')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # Disabled in production to prevent information leaks

# Allowed hosts for production
ALLOWED_HOSTS = ['yourdomain.com', 'localhost', '127.0.0.1']  # Replace with your production domain

# Custom user model
AUTH_USER_MODEL = 'bookshelf.CustomUser'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
    'relationship_app',
    'csp',  # For Content Security Policy
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware',  # For CSP
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# HTTPS and Security Settings
SECURE_SSL_REDIRECT = True  # Redirect all HTTP requests to HTTPS
SECURE_HSTS_SECONDS = 31536000  # Enforce HTTPS for 1 year via HSTS
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply HSTS to all subdomains
SECURE_HSTS_PRELOAD = True  # Allow HSTS preload listing
SESSION_COOKIE_SECURE = True  # Session cookies only over HTTPS
CSRF_COOKIE_SECURE = True  # CSRF cookies only over HTTPS
SECURE_BROWSER_XSS_FILTER = True  # Enable browser XSS filtering
SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevent MIME type sniffing
X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking by disallowing framing

# Content Security Policy (CSP)
CSP_DEFAULT_SRC = ("'self'",)  # Restrict content to same origin
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'")  # Adjust for external scripts if needed
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")  # Adjust for external styles if needed
CSP_IMG_SRC = ("'self'", "data:")  # Allow images from same origin and data URIs

"""
Security Notes:
- SECURE_SSL_REDIRECT: Ensures all traffic is redirected to HTTPS.
- SECURE_HSTS_SECONDS: Enforces HTTPS for 1 year via HSTS.
- SECURE_HSTS_INCLUDE_SUBDOMAINS: Applies HSTS to subdomains.
- SECURE_HSTS_PRELOAD: Allows HSTS preload for browser inclusion.
- SESSION_COOKIE_SECURE and CSRF_COOKIE_SECURE: Restrict cookies to HTTPS.
- SECURE_BROWSER_XSS_FILTER: Enables browser XSS protection.
- SECURE_CONTENT_TYPE_NOSNIFF: Prevents MIME type sniffing.
- X_FRAME_OPTIONS='DENY': Blocks clickjacking.
- CSP: Restricts content sources to mitigate XSS risks.
- SECRET_KEY: Use environment variable in production for security.
- Install 'django-csp' with 'pip install django-csp'.
- Run 'python manage.py check --deploy' to verify settings.
"""
```

## Step 2: Enforce Secure Cookies
The `settings.py` file above includes:
- `SESSION_COOKIE_SECURE = True`: Ensures session cookies are only sent over HTTPS.
- `CSRF_COOKIE_SECURE = True`: Ensures CSRF cookies are only sent over HTTPS.

These settings work with the `bookshelf` app’s forms (`BookForm`, `ExampleForm`) and templates (`book_form.html`, `form_example.html`), which include `{% csrf_token %}` for CSRF protection.

## Step 3: Implement Secure Headers
The `settings.py` file includes:
- `X_FRAME_OPTIONS = 'DENY'`: Prevents clickjacking by disallowing framing.
- `SECURE_CONTENT_TYPE_NOSNIFF = True`: Prevents browsers from MIME-sniffing responses.
- `SECURE_BROWSER_XSS_FILTER = True`: Enables browser XSS filtering.

The existing `django-csp` middleware and CSP settings further enhance XSS protection by restricting content sources.

## Step 4: Update Deployment Configuration
To support HTTPS in production, configure your web server (e.g., Nginx or Apache) with SSL/TLS certificates. Below is an example Nginx configuration, assuming you’re using a certificate from Let’s Encrypt.

### Nginx Configuration (example: `nginx.conf`)
```nginx
server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;
    return 301 https://$host$request_uri;  # Redirect HTTP to HTTPS
}

server {
    listen 443 ssl;
    server_name yourdomain.com www.yourdomain.com;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;

    # HSTS header
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:";

    location / {
        proxy_pass http://127.0.0.1:8000;  # Adjust to your app’s port
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /static/ {
        alias /path/to/LibraryProject/static/;
    }
}
```

**Instructions**:
1. **Obtain SSL Certificate**:
   - Use Let’s Encrypt: `sudo certbot --nginx -d yourdomain.com -d www.yourdomain.com`.
   - Follow prompts to generate and install certificates.
2. **Update Nginx Config**:
   - Save the above configuration in `/etc/nginx/sites-available/yourdomain.com`.
   - Link it: `sudo ln -s /etc/nginx/sites-available/yourdomain.com /etc/nginx/sites-enabled/`.
   - Test config: `sudo nginx -t`.
   - Restart Nginx: `sudo systemctl restart nginx`.
3. **Adjust Paths**:
   - Update `ssl_certificate` and `ssl_certificate_key` paths to match your certificate locations.
   - Set `proxy_pass` to your Django app’s port (e.g., Gunicorn).
   - Update `/path/to/LibraryProject/static/` to your static files directory (after running `python manage.py collectstatic`).
4. **Environment Variables**:
   - Set `DJANGO_SECRET_KEY` in your environment (e.g., `/etc/environment` or `.env` file):
     ```bash
     export DJANGO_SECRET_KEY='your-secure-secret-key'
     ```

**Alternative for Apache** (if used):
```apache
<VirtualHost *:80>
    ServerName yourdomain.com
    ServerAlias www.yourdomain.com
    Redirect permanent / https://yourdomain.com/
</VirtualHost>

<VirtualHost *:443>
    ServerName yourdomain.com
    ServerAlias www.yourdomain.com

    SSLEngine on
    SSLCertificateFile /etc/letsencrypt/live/yourdomain.com/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/yourdomain.com/privkey.pem

    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    Header always set X-Frame-Options "DENY"
    Header always set X-Content-Type-Options "nosniff"
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:"

    WSGIScriptAlias / /path/to/LibraryProject/LibraryProject/wsgi.py
    WSGIPythonPath /path/to/LibraryProject

    <Directory /path/to/LibraryProject/LibraryProject>
        <Files wsgi.py>
            Require all granted
        </Files>
    </Directory>

    Alias /static/ /path/to/LibraryProject/static/
    <Directory /path/to/LibraryProject/static>
        Require all granted
    </Directory>
</VirtualHost>
```

**Apache Setup**:
- Enable modules: `sudo a2enmod ssl headers rewrite proxy proxy_wsgi`.
- Save config in `/etc/apache2/sites-available/yourdomain.com.conf`.
- Enable site: `sudo a2ensite yourdomain.com.conf`.
- Restart Apache: `sudo systemctl restart apache2`.

## Step 5: Documentation and Review
### Security Review
- **HTTPS Enforcement**:
  - `SECURE_SSL_REDIRECT` redirects all HTTP traffic to HTTPS.
  - Nginx/Apache configs enforce HTTP-to-HTTPS redirects at the server level.
- **HSTS**:
  - `SECURE_HSTS_SECONDS=31536000` ensures browsers use HTTPS for one year.
  - `SECURE_HSTS_INCLUDE_SUBDOMAINS` and `SECURE_HSTS_PRELOAD` extend protection to subdomains and allow preload listing.
- **Secure Cookies**:
  - `SESSION_COOKIE_SECURE` and `CSRF_COOKIE_SECURE` protect cookies, aligning with `{% csrf_token %}` in `book_form.html` and `form_example.html`.
- **Security Headers**:
  - `X_FRAME_OPTIONS='DENY'` prevents clickjacking.
  - `SECURE_CONTENT_TYPE_NOSNIFF` stops MIME sniffing.
  - `SECURE_BROWSER_XSS_FILTER` enables browser XSS protection.
  - CSP settings restrict content sources, mitigating XSS risks.
- **Deployment**:
  - Nginx/Apache configs include SSL certificates and mirror Django’s security headers.
  - Environment variables secure `SECRET_KEY`.
- **Potential Improvements**:
  - Implement rate limiting (e.g., via `django-ratelimit` or Nginx).
  - Use a more robust database (e.g., PostgreSQL) in production.
  - Add monitoring for certificate expiration (e.g., Certbot auto-renewal).
  - Tighten CSP by removing `'unsafe-inline'` if external scripts/styles are used.

### Testing
1. **HTTPS Redirect**:
   - Access `http://yourdomain.com`; confirm redirect to `https://yourdomain.com`.
   - Use `curl -I http://yourdomain.com` to verify 301 redirect.
2. **HSTS**:
   - Check response headers for `Strict-Transport-Security: max-age=31536000; includeSubDomains; preload` (use browser dev tools or `curl -I https://yourdomain.com`).
3. **Cookies**:
   - Inspect session and CSRF cookies in browser dev tools; confirm `Secure` flag is set.
4. **Security Headers**:
   - Verify `X-Frame-Options: DENY`, `X-Content-Type-Options: nosniff`, `X-XSS-Protection: 1; mode=block`, and CSP headers in responses.
5. **Forms and Views**:
   - Test `book_create`, `book_edit`, and `example_view` over HTTPS; confirm CSRF protection and input validation.
   - Submit `<script>alert('xss')</script>` in `ExampleForm`; verify escaped output.
6. **Deployment**:
   - Run `python manage.py check --deploy` to audit settings.
   - Test Nginx/Apache configs with `nginx -t` or `apachectl configtest`.

## Repository Structure
```
Alx_DjangoLearnLab/
└── advanced_features_and_security/
    ├── LibraryProject/
    │   ├── settings.py  # Updated with HTTPS and security settings
    │   ├── urls.py
    │   ├── wsgi.py
    ├── bookshelf/
    │   ├── templates/
    │   │   └── bookshelf/
    │   │       ├── book_list.html
    │   │       ├── book_detail.html
    │   │       ├── book_form.html
    │   │       ├── book_confirm_delete.html
    │   │       ├── form_example.html
    │   ├── forms.py
    │   ├── models.py
    │   ├── urls.py
    │   ├── views.py
    ├── nginx.conf  # Deployment configuration example
    ├── https_security_setup.md  # This documentation
```

## Notes
- **Development Environment**:
  - For local testing without HTTPS, temporarily set `SECURE_SSL_REDIRECT = False`, `SESSION_COOKIE_SECURE = False`, and `CSRF_COOKIE_SECURE = False` in a `settings/development.py` file.
  - Example:
    ```python
    # LibraryProject/settings/development.py
    from .settings import *
    DEBUG = True
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    ```
- **Certificate Management**:
  - Use Certbot for auto-renewal: `sudo certbot renew --dry-run`.
- **SECRET_KEY**:
  - Ensure `DJANGO_SECRET_KEY` is set in your production environment (e.g., `.env` file or server configuration).
- **CSP**:
  - Adjust `CSP_SCRIPT_SRC` and `CSP_STYLE_SRC` for any external resources (e.g., CDNs) used in `bookshelf/templates`.